<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}

{% block content %}
<style>
    .container {
        display: flex;
    }

    #message_box {
        border: 1px solid black;
        height: 400px;
        width: 800px;
        overflow: auto;
        padding: 2px;
        border-radius: 7px;
        display: inline-block;
    }

    #friends_list {
        border: 1px solid black;
        height: 400px;
        width: 200px;
        overflow: auto;
        margin-left: 40px;
        padding: 2px;
        border-radius: 5px;
        margin-bottom: 20px;
    }

    .heading {
        text-align: center;
        margin-top: 10px;
    }

    .card {
        background-color: #f9f9f9;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 10px;
        margin-bottom: 10px;
    }

    .card:hover {
        background-color: #d3d3d3;
    }

    .card h3 {
        margin-top: 0;
        margin-bottom: 10px;
        font-size: 16px;
    }

    .card_buttons button {
        padding: 5px 10px;
        margin-right: 10px;
        border: none;
        border-radius: 3px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .card_buttons button:hover {
        background-color: #ddd;
    }

    .text {
        margin-top: 2px;
        margin-bottom: 2px;
    }

    .vertical-menu {
        width: 100px;
    }

    .vertical-menu a {
        color: black;
        display: block;
        padding: 8px;
    }

    .vertical-menu a:hover {
        background-color: #ccc;
    }

    .vertical-menu a.active {}
</style>

<head>

    {% include "navbar.jinja" %}

</head>

<h1>Messaging App </h1>
<main>
    <section class="container">
        <!-- The messages are displayed here -->
        <section id="message_box"></section>

        <!-- These part ideally should be a form element, 
    but I wrote this code a year ago and I don't want to break anything...-->

        <section class="section" id="friends_list">
            <h2 class="heading">Your Friends</h2>
            <div id="friends_menu">
                <!-- Friend list items will be inserted here dynamically -->
            </div>
        </section>
    </section>
    <!-- The (message) input box is set to display: none initially, 
    this means the input box is "invisible" initially-->

    <section id="input_box" style="display: none">
        <p class="text">Message: </p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>

    </section>
</main>

<script>
    let room_id = 0;
    let connected = false;

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
    $("#requestee").on("keyup", (e) => {
        if (e.key == "Enter") {
            add_friend();
        }
    })

    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })

    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";
    let role = "{{ role }}";
    Cookies.set('username', username);
    Cookies.set('role', role);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color = "black") => {
        add_message(msg, color);
    })

    socket.on("incoming_from_user", (username, message) => {
        add_message(`${username}: ${message}`);
        add_message2(`${username}: ${message}`);
    })

    socket.on("not_connected", () => {
        connected = false;
    })

    socket.on("connected", () => {
        connected = true;
    })

    async function delete_friend(friend) {
        let delete_friend_url = "{{ url_for('delete_friend') }}";
        await axios.post(delete_friend_url, {
            user1: Cookies.get('username'),
            user2: friend
        })
        update_friends();
    }

    async function update_friends() {
        socket.emit("get_friends", username, async (res) => {
            const friendsMenu = document.getElementById("friends_menu");
            friendsMenu.innerHTML = "";

            for (const friend of res) {
                friend_card = document.createElement("div");
                friend_card.classList.add("card");
                online = await check_online(friend);
                get_role_url = "{{ url_for('get_role') }}";
                role = (await axios.post(get_role_url, {username: friend})).data
                console.log(online)

                heading = document.createElement("h3");
                if (online) {
                    heading.textContent = `(Online, ${role}) ${friend}`;
                } else {
                    heading.textContent = `(${role}) ${friend}`;
                }
                friend_card.addEventListener("click", () => {
                    join_room(friend);
                });
                friend_card.appendChild(heading);

                button_remove = document.createElement("button");
                button_remove.classList.add("card_buttons");
                button_remove.textContent = "Remove";
                button_remove.onclick = function () {
                    delete_friend(friend);

                    update_friends();
                };

                friend_card.appendChild(button_remove);
                friendsMenu.appendChild(friend_card);
            };
        });
    }

    async function check_online(username) {
        return new Promise((resolve, reject) => {
            socket.emit("check_online", username, (res) => {
                resolve(res);
            });
        });
    }

    // we'll send the message to the server by emitting a "send" event
    function send() {
        check_connected()
        let message = $("#message").val();
        $("#message").val("");
        if (connected) {
            socket.emit("send", username, message, parseInt(Cookies.get('room_id')));
        } else {
            add_message("Cannot send message, waiting to connect ...", "grey");
        }
    }

    function check_connected() {
        socket.emit("check_connected", parseInt(Cookies.get("room_id")), (res) => {
            connected = res;
        })
    }

    // we emit a join room event to the server to join a room
    async function join_room(receiver) {
        // pass in the receiver of our message to the server
        // as well as the current user's username
        muted = await check_muted();
        if (muted) {
            alert('You are muted!')
        }
        else {
            socket.emit("join", username, receiver, (res) => {
                // res is a string with the error message if the error occurs
                // this is a pretty bad way of doing error handling, but watevs
                if (typeof res != "number") {
                    alert(res);
                    return;
                }

                // set the room id variable to the room id returned by the server
                room_id = res;
                Cookies.set("room_id", room_id);
                check_connected();


                // now we'll show the input box, so the user can input their message
                $("#invite_box").hide();
                $("#friends_list").hide();
                $("#request_list").hide();
                $("#input_box").show();
            });
        }
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#invite_box").show();
        $("#friends_list").show();
        $("#request_list").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color = "black") {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    function add_message2(message, color = "black") {
        let box = $("#message_history_list");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    async function check_muted() {
        let get_muted_url = "{{ url_for('get_muted') }}";
        res = await axios.post(get_muted_url, {
            username: Cookies.get('username')
        })
        return JSON.parse(res.data);
    }
    update_friends();
    setInterval(update_friends, 2000);
</script>
{% endblock %}