<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %}
<style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }

    #message_box {
        border: 1px solid black;
        height: 400px;
        width: 800px;
        overflow: auto;
        padding: 2px;
        display: inline-block;
    }

    #friends_list {
        border: 1px solid black;
        height: 400px;
        width: 200px;
        overflow: auto;
        padding: 2px;
        display: inline-block;
    }

    #request_list {
        border: 1px solid black;
        height: 400px;
        width: 200px;
        overflow: auto;
        padding: 2px;
        display: inline-block;
    }

    #message_history_list {
        border: 1px solid black;
        height: 400px;
        width: 200px;
        overflow: auto;
        padding: 2px;
        display: inline-block;
    }

    .text {
        margin-top: 2px;
        margin-bottom: 2px;
    }

    .vertical-menu {
        width: 100px;
    }

    .vertical-menu a {
        color: black;
        display: block;
        padding: 8px;
    }

    .vertical-menu a:hover {
        background-color: #ccc;
    }

    .vertical-menu a.active {
    }
</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display:inline-block">Username: {{ username }} </li>
    </ol>
</nav>

<h1>Messaging App </h1>
<main>
    <!-- The messages are displayed here -->
    <section id="message_box"></section>

    <!-- These part ideally should be a form element, 
    but I wrote this code a year ago and I don't want to break anything...-->
    
    <section id="friends_list">
        <h2>Your Friends</h2>
        <td style="test-align: center;">
            <div class="vertical-menu">
                {% for friend in friend_list %}
                <button onclick="join_room('{{ friend }}')">{{ friend }}</button>
                {% else %}
                <h2>No friends to display.</h2>
                {% endfor %}
            </div>
        </td>
    </section>
    <section id="request_list">
        <h2>Requests</h2>
        <td style="test-align: center;">
            <div class="vertical-menu">
                {% for request in requests %}
                <button onclick="accept_request('{{ request }}')">Accept {{ request }}</button>
                <button onclick="decline_request('{{ request }}')">Decline {{ request }}</button>
                {% else %}
                <h2>No requests.</h2>
                {% endfor %}
            </div>
        </td>
    </section>
        <section id="message_history_list">
        <h2>Message History</h2>
        <td style="test-align: center;">
            <div class="vertical-menu">
            </div>
        </td>
    </section>
    <!-- The (message) input box is set to display: none initially, 
    this means the input box is "invisible" initially-->
    <section id="invite_box">
        <p class="text">Send Friend Request: </p>
        <input id="requestee" placeholder="username">
        <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
        <button onclick="add_friend()">Send</button>
    </section>
    <section id="input_box" style="display: none">
        <p class="text">Message: </p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>
        <p><a href={{ url_for('logout') }}>Logout</a></p>
    </section>
</main>


<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    let room_id = 0;
    let connected = false;

    BigInt.prototype.toJSON = function() { return this.toString(); };

    Cookies.set('secret_key', BigInt(Math.floor(Math.random() * 100000)));

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
    $("#requestee").on("keyup", (e) => {
        if (e.key == "Enter") {
            add_friend();
        }
    })


    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })

    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";
    Cookies.set('username', username);

    // initializes the socket
    const socket = io();
    get_shared_keys();

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color = "black") => {
        add_message(msg, color);
    })

    socket.on("incoming_from_user", (username, cipher_text, hmac) => {
        message = CryptoJS.AES.decrypt(cipher_text, Cookies.get("shared_key"));
        message = message.toString(CryptoJS.enc.Utf8);
        if (hmac != CryptoJS.HmacSHA256(message, Cookies.get("shared_key").toString())){
            alert("Your connection has been compromised!")
        } else {
            add_message(`${username}: ${message}`);
            add_message2(`${username}: ${message}`);
        }
    })

    socket.on("not_connected", () => {
        connected = false;
    })

    socket.on("connected", () => {
        connected = true;
    })

    // we'll send the message to the server by emitting a "send" event
    function send() {
        check_connected()
        let message = $("#message").val();
        $("#message").val("");
            if (connected) {
            hmac = CryptoJS.HmacSHA256(message, Cookies.get("shared_key")).toString();
            cipher_text = CryptoJS.AES.encrypt(message, Cookies.get("shared_key"));
            socket.emit("send", username, cipher_text.toString(), hmac, parseInt(Cookies.get('room_id')));
            }
            else {
                add_message("Cannot send message, waiting to connect ...", "grey");
            }
    }

    // Gets shared keys for diffie helman from server and stores in cookies
    function get_shared_keys() {
        socket.emit("request_shared_keys", (p, g) => {
            Cookies.set('P', BigInt(p));
            Cookies.set('G', BigInt(g));
        })
    }

    function send_pub() {
        g = BigInt(parseInt(Cookies.get('G')));
        p = BigInt(parseInt(Cookies.get('P')));
        a = BigInt(parseInt(Cookies.get('secret_key')));
        A = (g ** a) % p;
        socket.emit('send_pub', A, false, parseInt(Cookies.get("room_id")));
    }

    socket.on("key_pub", (B, is_B) =>{
        g = BigInt(parseInt(Cookies.get('G')));
        p = BigInt(parseInt(Cookies.get('P')));
        a = BigInt(parseInt(Cookies.get('secret_key')));
        A = (g ** a) % p;
        Cookies.set('shared_key', (BigInt(B) ** a) % p, secure=true);
        if (!is_B){
            socket.emit('send_pub', A, true, parseInt(Cookies.get("room_id")));
        }
    })

    function check_connected() {
        socket.emit("check_connected", parseInt(Cookies.get("room_id")), (res) => {
            if (res) {
                connected = true;
                return true;
            } else {
                connected = false;
                return false;
            }
        })
    }

    // we emit a join room event to the server to join a room
    function join_room(receiver) {
        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join", username, receiver, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);
            check_connected();

            // now we'll show the input box, so the user can input their message
            $("#invite_box").hide();
            $("#friends_list").hide();
            $("#request_list").hide();
            $("#input_box").show();
            
            socket.emit("check_connected", parseInt(Cookies.get("room_id")), (res) => {
                if (res) {
                    socket.emit("display_connection", room_id)
                    send_pub();
                }
            })
            
        });

    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        Cookies.remove("shared_key");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#invite_box").show();
        $("#friends_list").show();
        $("#request_list").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color = "black") {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    function add_message2(message, color = "black") {
        let box = $("#message_history_list");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    function add_friend() {
        let new_friend = $("#requestee").val();
        $("#requestee").val("");
        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("add", username, new_friend, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res == "string") {
                alert(res);
                return;
            }
        });

    }

    function accept_request(requester) {
        res = socket.emit("accept", username, requester);
        if (typeof res == "string") {
                alert(res);
                return;
            }
    }

    function decline_request(requester) {
        res = socket.emit("decline", username, requester);
        if (typeof res == "string") {
                alert(res);
                return;
            }
    }

    function encrypt(plain_text, secret) {
        var key = CryptoJS.enc.Utf8.parse(secret);
        let iv = CryptoJS.lib.WordArray.create(key.words.slice(0, 4));
        console.log("IV : " + CryptoJS.enc.Base64.stringify(iv));
      
        // Encrypt the plaintext
        var cipherText = CryptoJS.AES.encrypt(plain_text, key, {
          iv: iv,
          mode: CryptoJS.mode.CBC,
          padding: CryptoJS.pad.Pkcs7
          });
      return (cipherText.toString(), iv);
    }

    function decrypt(cipherText, secret, iv) {
      // IV is a base64 string
      console.log("IV : " + CryptoJS.enc.Base64.stringify(iv));
      let iv1 = CryptoJS.enc.Base64.parse(iv);
      var key = CryptoJS.enc.Utf8.parse(secret);
      var cipherBytes = CryptoJS.enc.Base64.parse(cipherText.replaceAll('"', ''));

      var decrypted = CryptoJS.AES.decrypt({ciphertext: cipherBytes}, key, {
          iv: 3,
          mode: CryptoJS.mode.CBC,
          padding: CryptoJS.pad.Pkcs7
      });

      return decrypted.toString(CryptoJS.enc.Utf8);
}

</script>
{% endblock %}