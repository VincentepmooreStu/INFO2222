{% extends 'base.jinja' %}

{% block content %}
<style>
    .login-container {
        text-align: center;
        margin-top: 50px;
        width: 30%;
        margin: auto;
    }

    .login-heading {
        font-size: 32px;
        color: #333;
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 20px;
        text-align: left;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        color: #333;
    }

    .form-group input {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-sizing: border-box;
    }

    .form-group button {
        width: 100%;
        padding: 10px;
        background-color: #6200ffc5;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .form-group button:hover {
        background-color: #3600b3;
    }
</style>

<div class="login-container">
    <h1 class="login-heading">Login</h1>
    <div class="form-group">
        <label for="username">Username</label>
        <input id="username" type="text">
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <input id="password" type="password">
    </div>
    <div class="form-group">
        <button onclick="login()">Login</button>
    </div>
</div>

    <script>

        // basically checks if the server returns an Error message instead of a URL
        // this is a pretty terrible way of handling error generated by the server, but it works...
        function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }

        // login function to well login...
        async function login() {
            // this fancy syntax is part of the Jinja syntax
            // login_user is a Python function, this gets the URL that calls that Python function
            // you know the one with the:
            // app.route("/login/user", methods=["POST"])
            // login_user()
            // so... "{{ url_for('login_user')}}" 
            // gives us -> "http://blabla/login/user"
            let loginURL = "{{ url_for('login_user') }}";

            // axios post is a fancy way of posting a request to the server,
            // we pass in the username and password here
            let password = $("#password").val();
            let username = $("#username").val();

            password = CryptoJS.SHA256(password.concat(username)).toString();

            let res = await axios.post(loginURL, {
                username: username,
                password: password
            });

            // if the server sends in an error message, alert() the error message
            if (!isValidURL(res.data)) {
                alert(res.data);
                return;
            }

            // redirects to the URL (ie. res.data),
            // we use _self here since we all hate that moment
            // when the browser opens a new tab
            window.open(res.data, "_self")
        }
    </script>
{% endblock %}
